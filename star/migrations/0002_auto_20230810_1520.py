# Generated by Django 4.2.2 on 2023-08-10 09:20
from pickle import FALSE, TRUE
from django.contrib.auth.models import User
from django.contrib.auth.models import Group

from django.db import migrations
# Подключаем модуль для работы с датой/веременем
from datetime import datetime, timedelta
# Поделючаем модкль генерации случайных чисел
import random

global dict_category
dict_category = {}
global dict_catalog_price
dict_catalog_price = {}

# Найти или Добавить Категорию
def get_category(apps, val):   
    # Поиск категории
    if val in dict_category.values():
        for k, v in dict_category.items():
            if v == val:
                return k    
    else:
        Category = apps.get_model("star", "Category")
        category = Category()
        category.title = val
        category.save()
        dict_category[category.id] = category.title
        return category.id

# Добавить блюдо из меню
def insert_catalog(apps, param_catalog):   
    # Добавить товар
    Catalog = apps.get_model("star", "Catalog")
    catalog = Catalog()
    catalog.category_id = param_catalog[0]
    catalog.title = param_catalog[1]
    catalog.details = param_catalog[2]
    catalog.price = param_catalog[3]
    catalog.photo = param_catalog[4]
    catalog.save()
    dict_catalog_price[catalog.id] = catalog.price    
    return

# Добавить чек (заказ)
def insert_bill(apps, param_bill):   
    # Добавить товар
    Bill = apps.get_model("star", "Bill")
    bill = Bill()
    bill.dateb = param_bill[0]
    bill.place = param_bill[1]
    bill.total = param_bill[2]
    bill.discount = param_bill[3]
    bill.bonus = param_bill[4]
    bill.amount = param_bill[5]
    bill.save()
    bill.dateb = param_bill[0]
    bill.save()
    return

## Добавить детализацию чека (заказа)
#def insert_detailing(apps, param_detailing):   
#    # Добавить товар
#    Detailing = apps.get_model("star", "Detailing")
#    detailing = Detailing()
#    detailing.bill_id = param_detailing[0]
#    detailing.catalog_id = param_detailing[1]
#    detailing.price = param_detailing[2]
#    detailing.quantity = param_detailing[3]
#    detailing.save()
#    return

# Добавить детализацию чека (заказа)
# _catalog - список id каталога
# _quantity - соответствующе ему количество
def insert_detailing(apps, bill_id, _catalog, _quantity):   
    # Добавить товар
    Detailing = apps.get_model("star", "Detailing")
    i=0
    total=0
    while i < len(_catalog):
        detailing = Detailing() 
        detailing.bill_id = bill_id
        detailing.catalog_id = _catalog[i]
        detailing.price = dict_catalog_price.get(_catalog[i])
        detailing.quantity =  _quantity[i]
        total = total + (detailing.price*detailing.quantity) 
        detailing.save()
        i += 1
    # Подсчитать сумму
    Bill = apps.get_model("star", "Bill")    
    bill = Bill.objects.get(id=bill_id) 
    bill.total = total
    bill.save()
    return

# Добавить Новости
def insert_news(apps, param):
    News = apps.get_model("star", "News")
    news = News()
    news.daten = param[0]
    news.title = param[1]
    news.details = param[2]
    news.photo = param[3]
    news.save()
    return 

# Начальные данные
def new_data(apps, schema_editor):
    # Суперпользователь id=1
    user = User.objects.create_superuser(username='root',
    email='cafe120823@mail.ru',
    first_name='Суперпользователь', 
    last_name='',
    password='SsNn5678+-@')
    print("Суперпользователь создан")
    
    # Группа менеджеров
    managers = Group.objects.get_or_create(name = 'Managers')
    managers = Group.objects.get(name='Managers')
    print("Группа менеджеров создана")
    
    # Пользователь с ролью менеджера id=2
    user = User.objects.create_user(username='manager', password='Ss0066+-', email='manager@mail.ru', first_name='Менеджер',)
    managers.user_set.add(user)
    print("Менеджер добавлен в группу менеджеров")

    # Новости
    parameters = [datetime.now() - timedelta(days=35), "Заголовок новости", """Текст новости""", "images/news1.jpeg" ]
    insert_news(apps, parameters)
    print("Добавлены новости")

    #1 Каталог parameters - товар, (категория, название, описание, цена, фото)
    parameters = [get_category(apps, "Салаты"),  "Домашний салат", """Классика домашнего салата из помидоров, огурцов,лука, заправлен майонезом или растительным маслом""", 1200, "images/catalog01.jpg"]
    insert_catalog(apps, parameters)    
    #2 Каталог parameters - товар, (категория, название, описание, цена, фото)
    parameters = [get_category(apps, "Салаты"),  "Оливье классический", """Салат оливье — король салатов, без которого ни один новый год не может быть полноценным. Представляем вашему вниманию наш классический вариант всеми любимого оливье""", 1450, "images/catalog02.jpg"]
    insert_catalog(apps, parameters)    
    #3 Каталог parameters - товар, (категория, название, описание, цена, фото)
    parameters = [get_category(apps, "Салаты"),  "Салат \"Гнездо глухаря\"", """В основу салата входит: куриный рулет, листья салата, заправлен майонезом, посыпается картофелем пай, поверх ложат перепелинные яйца""", 1800, "images/catalog03.jpg"]
    insert_catalog(apps, parameters)    
    #4 Каталог parameters - товар, (категория, название, описание, цена, фото)
    parameters = [get_category(apps, "Салаты"),  "Салат \"Греческий\"", """Классический греческий салат в состав входит: сыр Фета, огурцы, помидоры, болгарский перец, лист салата, маслины, оливки заправлен на оливковом масле с добавлением бальзамического уксуса""", 1850, "images/catalog04.jpg"]
    insert_catalog(apps, parameters)    
    #5 Каталог parameters - товар, (категория, название, описание, цена, фото)
    parameters = [get_category(apps, "Салаты"),  "Салат \"Деревенский\"", """Кубиками нарезн филе курицы, добавлена консервированная фасоль, кукуруза, корнишоны, сухари, заправляются на майонезе""", 2100, "images/catalog05.jpg"]
    insert_catalog(apps, parameters)    
    #6 Каталог parameters - товар, (категория, название, описание, цена, фото)
    parameters = [get_category(apps, "Первые блюда"),  "Пельмени с бульоном", """Фирменные пельмени из отборной говядины приготовленные на пару с фирменным бульоном""", 1600, "images/catalog06.jpg"]
    insert_catalog(apps, parameters)    
    #7 Каталог parameters - товар, (категория, название, описание, цена, фото)
    parameters = [get_category(apps, "Первые блюда"),  "Солянка", """Ароматный суп с мясными деликатесами""", 1700, "images/catalog07.jpg"]
    insert_catalog(apps, parameters)    
    #8 Каталог parameters - товар, (категория, название, описание, цена, фото)
    parameters = [get_category(apps, "Первые блюда"),  "Уха по царски", """Бульон на рыбных костях, семга, судак, овощи""", 1850, "images/catalog08.jpg"]
    insert_catalog(apps, parameters)    
    #9 Каталог parameters - товар, (категория, название, описание, цена, фото)
    parameters = [get_category(apps, "Первые блюда"),  "Лапша по-домашнему", """Лапша по-домашнему (на курином бульоне)""", 1300, "images/catalog09.jpg"]
    insert_catalog(apps, parameters)    
    #10 Каталог parameters - товар, (категория, название, описание, цена, фото)
    parameters = [get_category(apps, "Первые блюда"),  "Твиндян тиге", """Традиционный корейский суп на основе соевой пасты с мясом говядины луком, помидорами, перцем, кабачками, тубу и яйцом""", 2000, "images/catalog10.jpg"]
    insert_catalog(apps, parameters)    
    #11 Каталог parameters - товар, (категория, название, описание, цена, фото)
    parameters = [get_category(apps, "Вторые блюда"),  "Бефстроганов с пюре", """Говядина вырезка, грибы шампиньоны, сливки, сметана, горчица""", 3700, "images/catalog11.jpg"]
    insert_catalog(apps, parameters)    
    #12 Каталог parameters - товар, (категория, название, описание, цена, фото)
    parameters = [get_category(apps, "Вторые блюда"),  "Мясо с грибами в сливочном соусе", """Телятина, шампиньоны, сливочный соус""", 3000, "images/catalog12.jpg"]
    insert_catalog(apps, parameters)    
    #13 Каталог parameters - товар, (категория, название, описание, цена, фото)
    parameters = [get_category(apps, "Вторые блюда"),  "Картофель по-домашнему с мясом", """Домашнее блюдо жаренный картофель с мясом""", 3000, "images/catalog13.jpg"]
    insert_catalog(apps, parameters)    
    #14 Каталог parameters - товар, (категория, название, описание, цена, фото)
    parameters = [get_category(apps, "Вторые блюда"),  "Мясо по-гречески", """Говяжья отбивная под сыром, грибы шампиньоны, яйцо, картофель фри""", 3000, "images/catalog14.jpg"]
    insert_catalog(apps, parameters)    
    #15 Каталог parameters - товар, (категория, название, описание, цена, фото)
    parameters = [get_category(apps, "Вторые блюда"),  "Мясо по-французски", """Говяжья отбивная, запеченная с помидорами и сыром, картофель фри""", 3000, "images/catalog15.jpg"]
    insert_catalog(apps, parameters)    
    #16 Каталог parameters - товар, (категория, название, описание, цена, фото)
    parameters = [get_category(apps, "Закуски"),  "Мясное ассорти", """Говядина х/к, казы, бастурма, рулет из индейки, ципленок х/к""", 5000, "images/catalog16.jpg"]
    insert_catalog(apps, parameters)    
    #17 Каталог parameters - товар, (категория, название, описание, цена, фото)
    parameters = [get_category(apps, "Закуски"),  "Овощи по-кавказски", """Нарезка из свежих овощей (помидоры, огурцы, болгарский перец), сыр брынза и свежая зелень""", 2250, "images/catalog17.jpg"]
    insert_catalog(apps, parameters)    
    #18 Каталог parameters - товар, (категория, название, описание, цена, фото)
    parameters = [get_category(apps, "Закуски"),  "Рыбное ассорти", """Нарезка семги, балык и скумбрии""", 5300, "images/catalog18.jpg"]
    insert_catalog(apps, parameters)    
    #19 Каталог parameters - товар, (категория, название, описание, цена, фото)
    parameters = [get_category(apps, "Закуски"),  "Сельдь по-русски", """Нарезка селедки, вареная картошка, маринованные огурци и лук""", 1750, "images/catalog19.jpg"]
    insert_catalog(apps, parameters)    
    #20 Каталог parameters - товар, (категория, название, описание, цена, фото)
    parameters = [get_category(apps, "Закуски"),  "Сатэ", """Обжаренные баклажаны в кляре с начиной из помидора и тар-тара""", 1600, "images/catalog20.jpg"]
    insert_catalog(apps, parameters)    
    #21 Каталог parameters - товар, (категория, название, описание, цена, фото)
    parameters = [get_category(apps, "Напитки"),  "Минеральная вода \"ASU\" 1л", """Минеральная вода""", 850, "images/catalog21.jpg"]
    insert_catalog(apps, parameters)    
    #22 Каталог parameters - товар, (категория, название, описание, цена, фото)
    parameters = [get_category(apps, "Напитки"),  "Морс Смородины 1л", """Морс Смородины""", 1700, "images/catalog22.jpg"]
    insert_catalog(apps, parameters)    
    #23 Каталог parameters - товар, (категория, название, описание, цена, фото)
    parameters = [get_category(apps, "Напитки"),  "Лимонад Киви лайм 1л", """Лимонад Киви лайм""", 2500, "images/catalog23.jpg"]
    insert_catalog(apps, parameters)    
    #24 Каталог parameters - товар, (категория, название, описание, цена, фото)
    parameters = [get_category(apps, "Напитки"),  "Лимонад Клубника лайм 1л", """Лимонад Клубника лайм""", 2500, "images/catalog24.jpg"]
    insert_catalog(apps, parameters)    
    #25 Каталог parameters - товар, (категория, название, описание, цена, фото)
    parameters = [get_category(apps, "Напитки"),  "Сок в ассортименте 0,95л", """Сок в ассортименте 0,95л""", 1500, "images/catalog25.jpg"]
    insert_catalog(apps, parameters)    
    print("Добавлен каталог")

    #1 Заказы
    parameters = [datetime.now() - timedelta(days=30), "№1", 0, 0, 0, 0 ]
    insert_bill(apps, parameters)
    insert_detailing(apps, 1, [random.randint(1, 5), random.randint(6, 10), random.randint(11, 15), random.randint(21, 25)], [random.randint(1, 2), random.randint(1, 2), 2, random.randint(1, 2)])
    #2 Заказы
    parameters = [datetime.now() - timedelta(days=30), "№2", 0, 0, 0, 0 ]
    insert_bill(apps, parameters)
    insert_detailing(apps, 2, [random.randint(1, 5), random.randint(6, 10), random.randint(11, 15), random.randint(21, 25)], [random.randint(1, 2), random.randint(1, 2), 2, random.randint(1, 2)])
    #3 Заказы
    parameters = [datetime.now() - timedelta(days=30), "№3", 0, 0, 0, 0 ]
    insert_bill(apps, parameters)
    insert_detailing(apps, 3, [random.randint(1, 5), random.randint(6, 10), random.randint(11, 15), random.randint(21, 25)], [random.randint(1, 2), random.randint(1, 2), 2, random.randint(1, 2)])
    #4 Заказы
    parameters = [datetime.now() - timedelta(days=30), "№4", 0, 0, 0, 0 ]
    insert_bill(apps, parameters)
    insert_detailing(apps, 4, [random.randint(1, 5), random.randint(6, 10), random.randint(11, 15), random.randint(21, 25)], [random.randint(1, 2), random.randint(1, 2), 2, random.randint(1, 2)])
    #5 Заказы
    parameters = [datetime.now() - timedelta(days=30), "№5", 0, 0, 0, 0 ]
    insert_bill(apps, parameters)
    insert_detailing(apps, 5, [random.randint(1, 5), random.randint(6, 10), random.randint(11, 15), random.randint(21, 25)], [random.randint(1, 2), random.randint(1, 2), 2, random.randint(1, 2)])
    #6 Заказы
    parameters = [datetime.now() - timedelta(days=29), "№1", 0, 0, 0, 0 ]
    insert_bill(apps, parameters)
    insert_detailing(apps, 6, [random.randint(1, 5), random.randint(6, 10), random.randint(11, 15), random.randint(21, 25)], [random.randint(1, 2), random.randint(1, 2), 2, random.randint(1, 2)])
    #7 Заказы
    parameters = [datetime.now() - timedelta(days=29), "№2", 0, 0, 0, 0 ]
    insert_bill(apps, parameters)
    insert_detailing(apps, 7, [random.randint(1, 5), random.randint(6, 10), random.randint(11, 15), random.randint(21, 25)], [random.randint(1, 2), random.randint(1, 2), 2, random.randint(1, 2)])
    #8 Заказы
    parameters = [datetime.now() - timedelta(days=29), "№3", 0, 0, 0, 0 ]
    insert_bill(apps, parameters)
    insert_detailing(apps, 8, [random.randint(1, 5), random.randint(6, 10), random.randint(11, 15), random.randint(21, 25)], [random.randint(1, 2), random.randint(1, 2), 2, random.randint(1, 2)])
    #9 Заказы
    parameters = [datetime.now() - timedelta(days=29), "№4", 0, 0, 0, 0 ]
    insert_bill(apps, parameters)
    insert_detailing(apps, 9, [random.randint(1, 5), random.randint(6, 10), random.randint(11, 15), random.randint(21, 25)], [random.randint(1, 2), random.randint(1, 2), 2, random.randint(1, 2)])
    #10 Заказы
    parameters = [datetime.now() - timedelta(days=29), "№5", 0, 0, 0, 0 ]
    insert_bill(apps, parameters)
    insert_detailing(apps, 10, [random.randint(1, 5), random.randint(6, 10), random.randint(11, 15), random.randint(21, 25)], [random.randint(1, 2), random.randint(1, 2), 2, random.randint(1, 2)])

    print("Добавлены заказы")

class Migration(migrations.Migration):

    dependencies = [
        ('star', '0001_initial'),
    ]

    operations = [
        migrations.RunPython(new_data),
        migrations.RunSQL("""CREATE VIEW view_catalog AS
            SELECT catalog.id, catalog.category_id, category.title AS category, catalog.title, catalog.details, catalog.price, catalog.photo
            FROM catalog LEFT JOIN category ON catalog.category_id = category.id"""),
        migrations.RunSQL("""CREATE VIEW view_detailing AS
            SELECT detailing.id, detailing.bill_id, bill.dateb, bill.place, bill.total, bill.discount, bill.bonus, bill.amount, detailing.catalog_id, view_catalog.category, 
            view_catalog.title, view_catalog.details,  view_catalog.photo, detailing.price, detailing.quantity, detailing.price*detailing.quantity AS detailing_total
            FROM detailing LEFT JOIN bill ON detailing.bill_id=bill.id
            LEFT JOIN view_catalog ON detailing.catalog_id=view_catalog.id"""),
        # SQLite
        #migrations.RunSQL("""CREATE TRIGGER bill_total_insert_detailing AFTER INSERT
        #    ON detailing
        #    BEGIN
        #    UPDATE bill SET total = (SELECT SUM(price*quantity) FROM detailing WHERE bill_id=NEW.bill_id) WHERE id = NEW.bill_id;
        #    END;"""),
        #migrations.RunSQL("""CREATE TRIGGER bill_total_update_detailing AFTER UPDATE
        #    ON detailing
        #    BEGIN
        #    UPDATE bill SET total = (SELECT SUM(price*quantity) FROM detailing WHERE bill_id=NEW.bill_id) WHERE id = NEW.bill_id;
        #    END;"""),
        #migrations.RunSQL("""CREATE TRIGGER bill_total_delete_detailing AFTER DELETE
        #    ON detailing
        #    BEGIN
        #    UPDATE bill SET total = (SELECT SUM(price*quantity) FROM detailing WHERE bill_id=OLD.bill_id) WHERE id = OLD.bill_id;
        #    END;"""),
        # PostgreSQL
        migrations.RunSQL("""CREATE OR REPLACE FUNCTION insert_detailing()
              RETURNS trigger AS
            $$
            BEGIN
	            UPDATE bill SET total = (SELECT SUM(price*quantity) FROM detailing WHERE bill_id=NEW.bill_id) WHERE id = NEW.bill_id;  
            RETURN NEW;
            END;
            $$
            LANGUAGE 'plpgsql';
            CREATE TRIGGER bill_total_insert_detailing
              AFTER INSERT
              ON "detailing"
              FOR EACH ROW
              EXECUTE PROCEDURE insert_detailing();"""),
        migrations.RunSQL("""CREATE OR REPLACE FUNCTION update_detailing()
              RETURNS trigger AS
            $$
            BEGIN
	            UPDATE bill SET total = (SELECT SUM(price*quantity) FROM detailing WHERE bill_id=NEW.bill_id) WHERE id = NEW.bill_id;  
            RETURN NEW;
            END;
            $$
            LANGUAGE 'plpgsql';
            CREATE TRIGGER bill_total_update_detailing
              AFTER UPDATE
              ON "detailing"
              FOR EACH ROW
              EXECUTE PROCEDURE update_detailing();"""),
        migrations.RunSQL("""CREATE OR REPLACE FUNCTION delete_detailing()
              RETURNS trigger AS
            $$
            BEGIN
	            UPDATE bill SET total = (SELECT SUM(price*quantity) FROM detailing WHERE bill_id=OLD.bill_id) WHERE id = OLD.bill_id;  
            RETURN NEW;
            END;
            $$
            LANGUAGE 'plpgsql';
            CREATE TRIGGER bill_total_delete_detailing
              AFTER DELETE
              ON "detailing"
              FOR EACH ROW
              EXECUTE PROCEDURE delete_detailing();"""),
    ]
